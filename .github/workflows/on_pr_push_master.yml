name: CI/CD
on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened, edited, closed, labeled, unlabeled ]
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [ master ]

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Super-Linter
        uses: Neha-Sinha2305/super-linter@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ANSIBLE: true
          VALIDATE_BASH: true
          VALIDATE_DOCKER_HADOLINT: true
          VALIDATE_GO: true
          VALIDATE_HTML: true
          VALIDATE_JAVA: true
          VALIDATE_JSON: true
          VALIDATE_MD: true
          VALIDATE_OPENAPI: true
          VALIDATE_PYTHON: true
          VALIDATE_PYTHON_PYLINT: true
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_RUBY: true
          VALIDATE_SQL: true
          VALIDATE_TERRAFORM: true
          VALIDATE_XML: true

  enforce-changelog:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed' && github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v1
      - uses: dangoslen/changelog-enforcer@v1.1.1
        with:
          changeLogPath: 'CHANGELOG.md'
          skipLabel: 'skip-changelog'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre_job:
    needs: linter
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**/README.md"]'

  test:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: macos-latest
    strategy:
      matrix:
        consul_acl: [ "consul_acl_enabled", "consul_acl_disabled" ]
        consul_acl_default_policy: [ "consul_acl_deny" ]
        nomad_acl: [ "nomad_acl_enabled", "nomad_acl_disabled" ]
        hashicorp_binary: [ "hashicorp_oss", "hashicorp_enterprise" ]

    steps:
      - uses: actions/checkout@v2

      - name: set consul acl (enabled/disabled)
        id: consul_acl
        run: |
          if [ "$test_consul_acl" == 'consul_acl_enabled' ]
          then
              echo "::set-output name=consul_acl::true"
          else
              echo "::set-output name=consul_acl::false"
          fi
        env:
          test_consul_acl: ${{ matrix.consul_acl }}

      - name: set consul acl default policy (allow/deny)
        id: consul_acl_default_policy
        run: |
          if [ "$test_consul_acl_default_policy" == 'consul_acl_allow' ]
          then
              echo "::set-output name=default_policy::allow"
          else
              echo "::set-output name=default_policy::deny"
          fi
        env:
          test_consul_acl_default_policy: ${{ matrix.consul_acl_default_policy }}

      - name: set nomad acl (enabled/disabled)
        id: nomad_acl
        run: |
          if [ "$test_nomad_acl" == 'nomad_acl_enabled' ]
          then
              echo "::set-output name=nomad_acl::true"
          else
              echo "::set-output name=nomad_acl::false"
          fi
        env:
          test_nomad_acl: ${{ matrix.nomad_acl }}

      - name: set hashicorp binary (oss/enterprise)
        id: hashicorp_binary
        run: |
          if [ "$test_hashicorp_binary" == 'hashicorp_oss' ]
          then
              echo "::set-output name=consul_enterprise::false"
              echo "::set-output name=nomad_enterprise::false"
              echo "::set-output name=vault_enterprise::false"
          else
              echo "::set-output name=consul_enterprise::true"
              echo "::set-output name=nomad_enterprise::true"
              echo "::set-output name=vault_enterprise::true"
          fi
        env:
          test_hashicorp_binary: ${{ matrix.hashicorp_binary }}

      - name: Make .env_override in template_example dir in order to matrix test
        if: github.repository == 'fredrikhgrelland/vagrant-hashistack-template'
        run: python .github/action/create-env.py
        env:
          ENVKEY_env_override: true
          ENVKEY_consul_acl: ${{ steps.consul_acl.outputs.consul_acl }}
          ENVKEY_consul_acl_default_policy: ${{ steps.consul_acl_default_policy.outputs.default_policy }}
          ENVKEY_nomad_acl: ${{ steps.nomad_acl.outputs.nomad_acl }}
          ENVKEY_consul_enterprise: ${{ steps.hashicorp_binary.outputs.consul_enterprise }}
          ENVKEY_nomad_enterprise: ${{ steps.hashicorp_binary.outputs.nomad_enterprise }}
          ENVKEY_vault_enterprise: ${{ steps.hashicorp_binary.outputs.vault_enterprise }}
          FILE_NAME: template_example/.env_override

      - name: Run make template_example
        if: github.repository == 'fredrikhgrelland/vagrant-hashistack-template'
        run: make template_example

      - name: Make .env_override in template dir in order to matrix test
        if: github.repository != 'fredrikhgrelland/vagrant-hashistack-template'
        run: python .github/action/create-env.py
        env:
          ENVKEY_env_override: true
          ENVKEY_consul_acl: ${{ steps.consul_acl.outputs.consul_acl }}
          ENVKEY_consul_acl_default_policy: ${{ steps.consul_acl_default_policy.outputs.default_policy }}
          ENVKEY_nomad_acl: ${{ steps.nomad_acl.outputs.nomad_acl }}
          ENVKEY_consul_enterprise: ${{ steps.hashicorp_binary.outputs.consul_enterprise }}
          ENVKEY_nomad_enterprise: ${{ steps.hashicorp_binary.outputs.nomad_enterprise }}
          ENVKEY_vault_enterprise: ${{ steps.hashicorp_binary.outputs.vault_enterprise }}
          FILE_NAME: .env_override

      - name: Run make test
        if: github.repository != 'fredrikhgrelland/vagrant-hashistack-template'
        run: make test

  release-prerequisites:
    if: |
      contains(github.event.pull_request.labels.*.name, 'major') ||
      contains(github.event.pull_request.labels.*.name, 'minor') ||
      contains(github.event.pull_request.labels.*.name, 'patch')
    runs-on: macos-latest
    outputs:
      bump: ${{ steps.bump.outputs.match }}
      next_version: ${{ steps.next_version.outputs.version }}
      log_entry: ${{ steps.changelog_reader.outputs.log_entry }}

    steps:
      - uses: actions/checkout@v2
      - name: Require PR label (major/minor/patch)
        id: bump
        uses: zwaldowski/match-label-action@v1
        with:
          allowed: major,minor,patch

      - id: next_version
        uses: zwaldowski/semver-release-action@v1
        with:
          dry_run: true
          bump: ${{ steps.bump.outputs.match }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and replace
        run: python .github/action/find-replace.py
        env:
          FIND: "'"
          REPLACE: "'\\''"
          FILE_TO_MODIFY: CHANGELOG.md

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1.1.0
        with:
          version: ${{ steps.next_version.outputs.version }}
          path: CHANGELOG.md

  release:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    needs:
      - release-prerequisites
      - test

    runs-on: macos-latest
    steps:
      - name: Create Release on github
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release-prerequisites.outputs.next_version }}
          release_name: Release v${{ needs.release-prerequisites.outputs.next_version }}
          body: |
            ${{ needs.release-prerequisites.outputs.log_entry }}
          draft: false
          prerelease: false

      - name: Create follow up issue to update minio-module version in other modules that use it
        uses: maxkomarychev/oction-create-issue@v0.7.1
        id: create_issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update modules in the repos to use the latest released minio-module"
          body: |
            Update modules in the following repos to use the latest released minio-module:
              - [ ]  https://github.com/fredrikhgrelland/terraform-nomad-presto
              - [ ]  https://github.com/fredrikhgrelland/terraform-nomad-hive

      - name: Print Id of the newly created issue
        run: echo ${{ steps.my_step_id.create_issue.number }}